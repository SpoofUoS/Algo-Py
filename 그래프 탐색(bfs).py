def bfs(g, start): # 너비 우선 탐색
    qu = []                       # 기억 장소 1: 앞으로 처리해야 할 꼭짓점을 큐에 저장
    done = set()                  # 기억 장소 2: 이미 큐에 추가한 꼭짓점들을 집합에 기록(중복 방지)
    
    qu.append(start)              # 시작점을 큐에 넣고 시작
    done.add(start)               # 집합에도 추가
    
    while qu:                     # 큐에 처리할 꼭짓점이 남아있으면
        p = qu.pop(0)             # 큐에서 처리 대상을 꺼내어
        print(p)                  # 꼭짓점 이름을 출력하고
        for x in g[p]:            # 대상 꼭짓점에 연결된 꼭짓점들 중에
            if x not in done:     # 아직 큐에 추가된 적이 없는 꼭짓점들을
                qu.append(x)      # 큐에 추가하고
                done.add(x)       # 집합에도 추가

# 그래프 정보
g = {
    1: [2, 3],
    2: [1, 4, 5],
    3: [1],
    4: [2],
    5: [2]
}

bfs(g, 1)

#          [1]
#          / \
#       [2]   [3]
#       / \    
#    [4]   [5]
#
# 그래프 탐색 과정
# 1. 시작 꼭짓점(1)을 qu와 done에 각각 추가하고 시작한다. qu = [1], done = {1} 
# 2. qu에서 '1'을 꺼내 출력한다. qu = [], done = {1}
# 3. '1'에 연결된 '2', '3'을 qu와 done에 추가한다. qu = [2, 3], done = {1, 2, 3}
# 4. qu에서 '2'를 꺼내 출력한다. qu = [3], done = {1, 2, 3}
# 5. '2'에 연결된 '1', '4', '5' 중에서 '1'은 이미 done에 있으므로 중복되지 않도록 제외하고
#    '4', '5'를 qu와 done에 추가한다.
# 6. qu에서 '3'을 꺼내 출력한다. qu = [4, 5], done = {1, 2 ,3 ,4 ,5}
# 7. '3'에 연결된 '1'은 이미 done에 있으므로 추가하지 않습니다.
# 8. qu에서 '4'를 꺼내 출력합니다. qu = [5], done = {1, 2, 3, 4, 5}
# 9. '4'에 연결된 '2'는 이미 done에 있으므로 추가하지 않습니다.
#10. qu에서 '5'를 꺼내 출력합니다. qu = [], done = {1, 2, 3, 4, 5}
#11. '5'에 연결된 '2'는 이미 done에 있으므로 추가하지 않습니다.
#12. qu가 비었으므로 종료합니다.
#13. 이 과정으로 출력된 꼭짓점 순서는 1 -> 2 -> 3 -> 4 -> 5 입니다.